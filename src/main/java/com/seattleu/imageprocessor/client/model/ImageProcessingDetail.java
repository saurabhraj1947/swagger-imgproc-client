/*
 * Image Processing API
 * Applies a sequence of transformations to an image
 *
 * OpenAPI spec version: 1.0
 * Contact: ahtran@seattleu.edu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.seattleu.imageprocessor.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.seattleu.imageprocessor.client.model.Transformation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * Image processing request details
 */
@ApiModel(description = "Image processing request details")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-03-11T15:35:47.287-08:00")
public class ImageProcessingDetail {
  @JsonProperty("image")
  private String image = null;

  @JsonProperty("transformations")
  private List<Transformation> transformations = new ArrayList<Transformation>();

  public ImageProcessingDetail image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Image encoded as base64 String
   * @return image
  **/
  @ApiModelProperty(required = true, value = "Image encoded as base64 String")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public ImageProcessingDetail transformations(List<Transformation> transformations) {
    this.transformations = transformations;
    return this;
  }

  public ImageProcessingDetail addTransformationsItem(Transformation transformationsItem) {
    this.transformations.add(transformationsItem);
    return this;
  }

   /**
   * List of required transformations on the image
   * @return transformations
  **/
  @ApiModelProperty(required = true, value = "List of required transformations on the image")
  public List<Transformation> getTransformations() {
    return transformations;
  }

  public void setTransformations(List<Transformation> transformations) {
    this.transformations = transformations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageProcessingDetail imageProcessingDetail = (ImageProcessingDetail) o;
    return Objects.equals(this.image, imageProcessingDetail.image) &&
        Objects.equals(this.transformations, imageProcessingDetail.transformations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, transformations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageProcessingDetail {\n");
    
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    transformations: ").append(toIndentedString(transformations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

